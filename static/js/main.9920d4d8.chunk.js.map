{"version":3,"sources":["clouds.ico","rain.ico","App.js","serviceWorker.js","index.js","sunny.ico"],"names":["module","exports","Key","App","props","onMapClick","bind","getWeather","getLocation","state","data","weatherDescription","weatherDescriptionTime","options1","title","display","text","fontSize","tooltips","mode","scales","xAxes","scaleLabel","labelString","yAxes","type","position","id","gridLines","labels","show","options2","options3","dict1","datasets","label","dict2","dict3","e","coordLat","latlng","lat","coordLng","lng","newLatLng","L","LatLng","marker","addTo","this","map","alert","fetch","then","response","json","console","log","setState","list","catch","error","city","document","getElementById","value","country","temperature","rain","pressure","humidity","windSpeed","windDirection","weatherDes","weatherDesTime","currentweather","num","time","i","push","main","temp","weath","weather","dt_txt","wind","speed","deg","tochaine","JSON","stringify","includes","substr","indexOf","parseFloat","dict1Copy","yAxisID","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","dict2Copy","hoverBackgroundColor","hoverBorderColor","dict3Copy","fill","className","src","require","placeholder","onClick","Object","keys","key","index","ref","getDataSetAtEvent","dataset","options","center","zoom","zoomControl","tileLayer","attribution","maxZoom","accessToken","on","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9920d4d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clouds.addeb6e9.ico\";","module.exports = __webpack_public_path__ + \"static/media/rain.89ba78d1.ico\";","import React, { Component } from 'react'\nimport './App.css';\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport  {Bar, Line} from 'react-chartjs-2';\n\nconst Key= \"6c1ce666f73cd6af767b3161e69090cd\";\n\nexport default class App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.onMapClick=this.onMapClick.bind(this);\n    this.getWeather= this.getWeather.bind(this);\n    this.getLocation=this.getLocation.bind(this); \n\n    this.state= {\n      data:[],\n      weatherDescription:[],\n      weatherDescriptionTime:[],\n      options1:{\n        title:{ display: true, text: 'Temp and Rain', fontSize:20},\n        tooltips: { mode: 'label'},\n        scales: {\n          xAxes:[{scaleLabel:{display:true,labelString: 'Date and Time'}}],\n         yAxes: [{ scaleLabel:{ display:true,labelString:'Temperature(K)' },\n                   type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    gridLines: {display: false },\n                    labels: {show: true} \n                  },\n                  {scaleLabel:{display:true,labelString:'Rain(mm)'},\n                   type: 'linear',\n                   display: true,\n                   position: 'right',\n                    id: 'y-axis-2',\n                    gridLines: { display: false},\n                  }\n      ]}},\n      options2:{\n        title:{ display: true, text: 'Pressure and Humidity', fontSize:20},\n        tooltips: { mode: 'label'},\n        scales: {\n          xAxes:[{scaleLabel:{display:true,labelString: 'Date and Time'}}],\n         yAxes: [{ scaleLabel:{ display:true,labelString:'Pressure(hPa)' },\n                   type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    gridLines: {display: false },\n                    labels: {show: true} \n                  },\n                  {scaleLabel:{display:true,labelString:'Humidity(%)'},\n                   type: 'linear',\n                   display: true,\n                   position: 'right',\n                    id: 'y-axis-2',\n                    gridLines: { display: false},\n                  }\n      ]}}, \n      options3:{\n        title:{ display: true, text: 'Wind Speed and direction', fontSize:20},\n        tooltips: { mode: 'label'},\n        scales: {\n          xAxes:[{scaleLabel:{display:true,labelString: 'Date and Time'}}],\n         yAxes: [{ scaleLabel:{ display:true,labelString:'Speed(m/s)' },\n                   type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    gridLines: {display: false },\n                    labels: {show: true} \n                  },\n                  {scaleLabel:{display:true,labelString:'Direction(Degrees)'},\n                   type: 'linear',\n                   display: true,\n                   position: 'right',\n                    id: 'y-axis-2',\n                    gridLines: { display: false},\n                  }\n      ]}},\n      //Initializing the data to be displayed\n      dict1: {\n        datasets:[{label:'Temperature'},{label:'Rain' }]\n      },\n      dict2: {\n       datasets: [{ label: 'Pressure bars'},{ label: 'Humidity bars'}]\n      },\n      dict3: {\n        datasets:[{label:\"Wind Speed\"},{ label:\"Wind Direction\" }]\n      }\n    }\n  }\n\n  onMapClick(e) {\n    var coordLat= e.latlng.lat;\n    var coordLng= e.latlng.lng;\n    var newLatLng = new L.LatLng(coordLat, coordLng);\n    L.marker(newLatLng).addTo(this.map);\n    alert(`you are now viewing the weather for following coor ${newLatLng}`);\n    return fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${coordLat}&lon=${coordLng}&APPID=${Key}`)\n   .then(response => (response.json()))\n   .then(json =>{ console.log(json) ;\n    this.setState({\n      data : json.list\n    })\n     this.getWeather();\n  })\n  .catch((error)=>{\n      console.log(\"error\",error);\n  })\n  }\n\n getLocation(){\n   var city = document.getElementById(\"SearchCity\").value;\n   var country=document.getElementById(\"SearchCountry\").value;\n    return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${Key}`)\n   .then(response => (response.json()))\n   .then(json =>{ console.log(json) ;\n     this.setState({\n      data : json.list\n    })\n     this.getWeather();\n    })\n   .catch((error)=>{\n      console.log(\"error\",error);\n   })\n  }\n\n  //Function sorting the json data retrieved\n  getWeather(){  \n\n    var temperature =[]; var rain=[];\n    var pressure=[]; var humidity=[];\n    var windSpeed=[]; var windDirection=[];  \n    var weatherDes=[]; var weatherDesTime=[];\n    var currentweather=''; var num=0;  var time=[];\n\n    for (var i in this.state.data){\n\n      temperature.push(this.state.data[i].main.temp);\n\n      var weath=this.state.data[i].weather[0].main;\n      if (weath!= currentweather && num<9) {\n        weatherDes.push(weath);\n        weatherDesTime.push(this.state.data[i].dt_txt);\n        currentweather=weath; num=num+1;\n      } \n\n      humidity.push(this.state.data[i].main.humidity);\n\n      windSpeed.push(this.state.data[i].wind.speed);\n\n      windDirection.push(this.state.data[i].wind.deg);\n\n      var tochaine= JSON.stringify(this.state.data[i]);\n      if (tochaine.includes(\"3h\")){\n        var value=tochaine.substr(tochaine.indexOf(\"3h\")+4,4);\n        rain.push(parseFloat(value));\n      } else{\n        rain.push(0);\n      }\n\n      pressure.push(this.state.data[i].main.pressure);\n\n      time.push(this.state.data[i].dt_txt);\n     }\n\n    var dict1Copy= {\n      labels: time,\n      datasets:[{\n        label:'Temperature',\n        data: temperature,\n        yAxisID: 'y-axis-1',\n        backgroundColor:  'rgba(250,128,114,0.1)',\n        borderColor: 'rgb(250,128,114)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(250,128,114)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgb(250,128,114)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 5,\n        pointRadius: 4,\n        pointHitRadius: 10,\n      },{\n        label:'Rain',\n        data: rain,\n        yAxisID: 'y-axis-2',\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 5,\n        pointRadius: 4,\n        pointHitRadius: 10,\n      }]\n    }\n\n    var dict2Copy = {\n      labels: time,\n      datasets: [{\n        label: 'Pressure bars',\n        backgroundColor: '#9ACD32',\n        borderColor: '#9ACD32',\n        hoverBackgroundColor: '#000080',\n        hoverBorderColor: '#92a1cf',\n        data: pressure,\n        yAxisID:'y-axis-1'\n      },{\n        label:'Humidity',\n        data: humidity,\n        borderColor: '#ffefd5',\n        backgroundColor: '#EC932F',\n        hoverBackgroundColor: '#ffefd5',\n        hoverBorderColor: '#EC932F',\n        yAxisID:'y-axis-2'\n      }\n    ]\n  }\n\n  var dict3Copy={\n    labels: time,\n    datasets:[{\n      label: 'Wind Speed',\n      fill:false,\n      data: windSpeed,\n      yAxisID: 'y-axis-1',\n      backgroundColor: 'rgba(75,192,192,0.1)',\n      borderColor: 'rgb(75,192,192)',\n    },{\n      label:'Wind direction',\n      fill:false,\n      data: windDirection,\n      backgroundColor: '#c0c0c0',\n      borderColor: '#c0c0c0',\n      yAxisID:'y-axis-2'\n    }]\n  }\n    this.setState({\n      weatherDescription: weatherDes,\n      weatherDescriptionTime: weatherDesTime,\n      dict1: dict1Copy,\n      dict2: dict2Copy,\n      dict3: dict3Copy\n    })\n  }\n\n  render (){\n   const {weatherDescription} = this.state;  \n   const {weatherDescriptionTime} =this.state;\n   return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        Weather App\n      </header>\n\n      <div className=\"line1\">\n        <img id=\"pic1\" src={require('./sunny.ico')} />      \n        <div className=\"SearchBar\">\n          <h4 id=\"title\">Enter city & country or Click on map</h4>\n          <input type=\"search\" id=\"SearchCity\" placeholder=\"City..\" />\n          <input type=\"search\" id=\"SearchCountry\"  placeholder=\"Country..\" />\n          <button className=\"getWeatherbutton\" onClick={this.getLocation} value=\"Charge\">Charge</button><br/>\n        </div>\n      </div>\n\n      <div className=\"Mapbox\" id=\"mapid\"></div>\n      <div className=\"row1\">\n        <div className=\"description\"> \n          <h4 className=\"title2\">Expected changes for the next 5 days</h4>\n          <div className=\"nestedDescTable\">\n           <div className=\"DescText\">\n             {\n               Object.keys(weatherDescription).map((key, index) => ( \n                <p key={index}>{weatherDescription[key]}</p> \n               ))\n              } \n            </div>\n            <div className=\"DescTime\">\n              {\n                Object.keys(weatherDescriptionTime).map((key, index) => ( \n                <p key={index}>{weatherDescriptionTime[key]}</p> \n                ))\n              } \n            </div>\n            <div className=\"DescImag\">\n              <img id=\"pic3\" src={require('./sunny.ico')} />\n              <img id=\"pic4\" src={require('./clouds.ico')} />\n              <img id=\"pic5\" src={require('./rain.ico')} />\n            </div>\n         </div>       \n        </div>\n        <div className=\"plot\">  \n         <Line\n            ref=\"chart\"\n            data={this.state.dict1}\n            getDataSetAtEvent={dataset => console.log(dataset)}\n            options={this.state.options1}\n         />\n       </div>\n      </div>\n\n      <div className=\"row2\">\n        <div className=\"plot2\">  \n         <Bar\n            ref=\"chart2\"\n            data={this.state.dict2}\n            getDataSetAtEvent={dataset => console.log(dataset)}\n            options={this.state.options2}\n          />\n        </div>\n        <div className=\"plot3\">\n         <Line\n            ref=\"chart3\"\n            data={this.state.dict3}\n            getDataSetAtEvent={dataset => console.log(dataset)}\n            options={this.state.options3}\n          />\n        </div>\n      </div> \n\n    </div>\n   );\n  }\n  UNSAFE_componentWillMount(){\n  }\n  componentDidMount(){\n     this.map= L.map('mapid', {\n      center: [43.55, 5.12],\n      zoom: 5,\n      zoomControl: true\n    })\n    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n     maxZoom: 18,\n      id: 'mapbox.streets',\n      accessToken: 'pk.eyJ1IjoibWFsZWtoYSIsImEiOiJjazNlajUwNXcwOG54M2Ntemt5NGE1MnFqIn0.zmG039olyjNTguPwa1Q0zA'\n   }).addTo(this.map);\n    this.map.on('click', this.onMapClick);\n    return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=paris,fr&APPID=${Key}`)\n   .then(response => (response.json()))\n   .then(json =>{ console.log(json) ;\n     this.setState({\n      data : json.list\n    })\n     this.getWeather();\n    })\n   .catch((error)=>{\n      console.log(\"error\",error);\n   })\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunny.01d21945.ico\";"],"sourceRoot":""}