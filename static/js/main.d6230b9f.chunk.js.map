{"version":3,"sources":["clouds.ico","rain.ico","App.js","serviceWorker.js","index.js","sunny.ico"],"names":["module","exports","Key","greenIcon","L","Icon","extend","options","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","require","shadowUrl","App","props","onMapClick","bind","getWeather","getLocation","state","marker","icon","data","weatherDescription","weatherDescriptionTime","options1","title","display","text","fontSize","tooltips","mode","scales","xAxes","scaleLabel","labelString","yAxes","type","position","id","gridLines","labels","show","options2","options3","dict1","datasets","label","dict2","dict3","e","coordLat","latlng","lat","coordLng","lng","newLatLng","LatLng","this","map","removeLayer","setState","addTo","bindPopup","Number","parseFloat","toFixed","openPopup","fetch","then","response","json","console","log","list","catch","error","city","document","getElementById","value","country","temperature","rain","pressure","humidity","windSpeed","windDirection","weatherDes","weatherDesTime","time","currentweather","num","i","push","main","temp","weath","weather","dt_txt","wind","speed","deg","tochaine","JSON","stringify","includes","substr","indexOf","dict1Copy","yAxisID","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","dict2Copy","hoverBackgroundColor","hoverBorderColor","dict3Copy","fill","className","src","placeholder","onClick","Object","keys","key","index","ref","getDataSetAtEvent","dataset","center","zoom","zoomControl","tileLayer","attribution","maxZoom","accessToken","on","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6230b9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clouds.addeb6e9.ico\";","module.exports = __webpack_public_path__ + \"static/media/rain.89ba78d1.ico\";","import React, { Component } from 'react'\nimport './App.css';\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport { Bar, Line } from 'react-chartjs-2';\n\n/** API key definition **/\nconst Key = \"6c1ce666f73cd6af767b3161e69090cd\";\n/*Defining the marker icon*/\nvar LeafIcon = L.Icon.extend({\n    options: {\n        iconSize: [35, 40],\n        shadowSize: [50, 64],\n        iconAnchor: [18, 37],\n        shadowAnchor: [20, 62],\n        popupAnchor: [-4, -10]\n    }\n});\nvar greenIcon = new LeafIcon({\n    iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n    shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n})\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props)\n        /**Binding the functions to the application context **/\n        this.onMapClick = this.onMapClick.bind(this);\n        this.getWeather = this.getWeather.bind(this);\n        this.getLocation = this.getLocation.bind(this);\n        /** Defining the state variables**/\n        this.state = {\n            marker: L.marker([48.864, 2.349], { icon: greenIcon }),\n            data: [],\n            weatherDescription: [],\n            weatherDescriptionTime: [],\n            /**Defining the display options of the plots**/\n            options1: {\n                title: { display: true, text: 'Temperature and Rain', fontSize: 20 },\n                tooltips: { mode: 'label' },\n                scales: {\n                    xAxes: [{ scaleLabel: { display: true, labelString: 'Date and Time' } }],\n                    yAxes: [{\n                            scaleLabel: { display: true, labelString: 'Temperature (K)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            id: 'y-axis-1',\n                            gridLines: { display: false },\n                            labels: { show: true }\n                        },\n                        {\n                            scaleLabel: { display: true, labelString: 'Rain (mm)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            id: 'y-axis-2',\n                            gridLines: { display: false },\n                        }\n                    ]\n                }\n            },\n            options2: {\n                title: { display: true, text: 'Pressure and Humidity', fontSize: 20 },\n                tooltips: { mode: 'label' },\n                scales: {\n                    xAxes: [{ scaleLabel: { display: true, labelString: 'Date and Time' } }],\n                    yAxes: [{\n                            scaleLabel: { display: true, labelString: 'Pressure(hPa)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            id: 'y-axis-1',\n                            gridLines: { display: false },\n                            labels: { show: true }\n                        },\n                        {\n                            scaleLabel: { display: true, labelString: 'Humidity (%)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            id: 'y-axis-2',\n                            gridLines: { display: false },\n                        }\n                    ]\n                }\n            },\n            options3: {\n                title: { display: true, text: 'Wind Speed and direction', fontSize: 20 },\n                tooltips: { mode: 'label' },\n                scales: {\n                    xAxes: [{ scaleLabel: { display: true, labelString: 'Date and Time' } }],\n                    yAxes: [{\n                            scaleLabel: { display: true, labelString: 'Speed (m/s)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            id: 'y-axis-1',\n                            gridLines: { display: false },\n                            labels: { show: true }\n                        },\n                        {\n                            scaleLabel: { display: true, labelString: 'Direction (Degrees)' },\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            id: 'y-axis-2',\n                            gridLines: { display: false },\n                        }\n                    ]\n                }\n            },\n            /** Initializing the data to be displayed **/\n            dict1: {\n                datasets: [{ label: 'Temperature' }, { label: 'Rain' }]\n            },\n            dict2: {\n                datasets: [{ label: 'Pressure bars' }, { label: 'Humidity bars' }]\n            },\n            dict3: {\n                datasets: [{ label: \"Wind Speed\" }, { label: \"Wind Direction\" }]\n            }\n        }\n    }\n    /** Map OnClick Event handler\n     * Retrives relative weather data to \n     * the location clicked on map\n     *@param {e} - event location\n     **/\n    onMapClick(e) {\n        /** Retrieving the clicked location's coordinates**/\n        var coordLat = e.latlng.lat;\n        var coordLng = e.latlng.lng;\n        var newLatLng = new L.LatLng(coordLat, coordLng);\n        /*Removing old marker */\n        this.map.removeLayer(this.state.marker);\n        this.setState({\n            marker: L.marker(newLatLng, { icon: greenIcon })\n        })\n        /*Add new marker and popup to the map*/\n        this.state.marker.addTo(this.map);\n        this.state.marker.bindPopup(`coordinates(${Number.parseFloat(coordLat).toFixed(2)},${Number.parseFloat(coordLng).toFixed(2)})`).openPopup();\n        /*Fetch weather data of location*/\n        return fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${coordLat}&lon=${coordLng}&APPID=${Key}`)\n            .then(response => (response.json()))\n            .then(json => {\n                console.log(json);\n                /**Saving the retrieved data in the corresponding state variable **/\n                this.setState({\n                    data: json.list\n                })\n                /**Call sorting data function**/\n                this.getWeather();\n            })\n            .catch((error) => {\n                console.log(\"error\", error);\n            })\n    }\n    /** Button OnClick Listener\n     * Retrives relative weather data to \n     * the location entered as input\n     **/\n    getLocation() {\n        /**Retrieving the city's name and country **/\n        var city = document.getElementById(\"SearchCity\").value;\n        var country = document.getElementById(\"SearchCountry\").value;\n        return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${Key}`)\n            .then(response => (response.json()))\n            .then(json => {\n                console.log(json);\n                this.setState({\n                    data: json.list\n                })\n                this.getWeather();\n            })\n            .catch((error) => {\n                console.log(\"error\", error);\n            })\n    }\n\n    /** Function sorting the json data retrieved\n     * Retrieving the temperature, rain, pressure,\n     * humidity, wind(speed and direction) and date/time\n     **/\n    getWeather() {\n        var temperature = [];\n        var rain = [];\n        var pressure = [];\n        var humidity = [];\n        var windSpeed = [];\n        var windDirection = [];\n        var weatherDes = [];\n        var weatherDesTime = [];\n        var time = [];\n        var currentweather = '';\n        var num = 0;\n        /**Iterating through the json data elements**/\n        for (var i in this.state.data) {\n            /*Collecting temperature*/\n            temperature.push(this.state.data[i].main.temp);\n            /*Collecting first few weather description changes*/\n            var weath = this.state.data[i].weather[0].main;\n            if (weath != currentweather && num < 8) {\n                weatherDes.push(weath);\n                /*Collecting the corresponding description time and date*/\n                weatherDesTime.push(this.state.data[i].dt_txt);\n                currentweather = weath;\n                num = num + 1;\n            }\n            /*Collecting humidity*/\n            humidity.push(this.state.data[i].main.humidity);\n            /*Collecting wind speed*/\n            windSpeed.push(this.state.data[i].wind.speed);\n            /*Collecting wind direction*/\n            windDirection.push(this.state.data[i].wind.deg);\n            /*Testing if there has been rain the past 3 hours*/\n            var tochaine = JSON.stringify(this.state.data[i]);\n            if (tochaine.includes(\"3h\")) {\n                var value = tochaine.substr(tochaine.indexOf(\"3h\") + 4, 4);\n                /*Collecting rain volume*/\n                rain.push(parseFloat(value));\n            } else {\n                /*No rain*/\n                rain.push(0);\n            }\n            /*Collecting pressure*/\n            pressure.push(this.state.data[i].main.pressure);\n            /*Collecting Date and time*/\n            time.push(this.state.data[i].dt_txt);\n        }\n        /**Defining copies of data to be displayed**/\n        var dict1Copy = {\n            labels: time,\n            datasets: [{\n                label: 'Temperature',\n                data: temperature,\n                yAxisID: 'y-axis-1',\n                backgroundColor: 'rgba(250,128,114,0.1)',\n                borderColor: 'rgb(250,128,114)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgb(250,128,114)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 2,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgb(250,128,114)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 5,\n                pointRadius: 4,\n                pointHitRadius: 10,\n            }, {\n                label: 'Rain',\n                data: rain,\n                yAxisID: 'y-axis-2',\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 2,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 5,\n                pointRadius: 4,\n                pointHitRadius: 10,\n            }]\n        }\n\n        var dict2Copy = {\n            labels: time,\n            datasets: [{\n                label: 'Pressure bars',\n                backgroundColor: '#9ACD32',\n                borderColor: '#9ACD32',\n                hoverBackgroundColor: '#000080',\n                hoverBorderColor: '#92a1cf',\n                data: pressure,\n                yAxisID: 'y-axis-1'\n            }, {\n                label: 'Humidity',\n                data: humidity,\n                borderColor: '#ffefd5',\n                backgroundColor: '#EC932F',\n                hoverBackgroundColor: '#ffefd5',\n                hoverBorderColor: '#EC932F',\n                yAxisID: 'y-axis-2'\n            }]\n        }\n\n        var dict3Copy = {\n            labels: time,\n            datasets: [{\n                label: 'Wind Speed',\n                fill: false,\n                data: windSpeed,\n                yAxisID: 'y-axis-1',\n                backgroundColor: 'rgba(75,192,192,0.1)',\n                borderColor: 'rgb(75,192,192)',\n            }, {\n                label: 'Wind direction',\n                fill: false,\n                data: windDirection,\n                backgroundColor: '#c0c0c0',\n                borderColor: '#c0c0c0',\n                yAxisID: 'y-axis-2'\n            }]\n        }\n        /*Setting the state variables to corresponding values*/\n        this.setState({\n            weatherDescription: weatherDes,\n            weatherDescriptionTime: weatherDesTime,\n            dict1: dict1Copy,\n            dict2: dict2Copy,\n            dict3: dict3Copy\n        })\n    }\n    /**Render function\n     *Defining the application's content\n     **/\n    render() {\n        const { weatherDescription } = this.state;\n     const { weatherDescriptionTime } = this.state;\n     return (\n\n             <div className=\"App\">\n      <header className=\"App-header\">\n        Weather App\n      </header>\n      <div className=\"line1\">\n        <img id=\"pic1\" src={require('./sunny.ico')} />      \n        <div className=\"SearchBar\">\n          <h4 id=\"title\">Enter city & country or Click on map</h4>\n          <input type=\"search\" id=\"SearchCity\" placeholder=\"Paris\" />\n          <input type=\"search\" id=\"SearchCountry\"  placeholder=\"France\" />\n          <button className=\"getWeatherbutton\" onClick={this.getLocation} value=\"Charge\">Charge</button><br/>\n        </div>\n      </div>\n\n      <div className=\"Mapbox\" id=\"mapid\"></div>\n      <table className=\"table\">\n        <tr id =\"firstLine\">\n          <th id=\"row11\">\n              <div className=\"description\"> \n                <h4 className=\"title2\">Expected changes for the next 5 days</h4>\n                <div className=\"nestedDescTable\">\n                <div className=\"column1Titre\">Main description</div>\n                <div className=\"column2Titre\">Date and time</div>\n                <div className=\"DescText\">\n                  {\n                    Object.keys(weatherDescription).map((key, index) => ( \n                    <p key={index}>{weatherDescription[key]}</p> \n                  ))\n                  } \n                </div>\n              <div className=\"DescTime\">\n               {\n                  Object.keys(weatherDescriptionTime).map((key, index) => ( \n                  <p key={index}>{weatherDescriptionTime[key]}</p> \n                  ))\n                } \n              </div>\n              <div className=\"DescImag\">\n                <img id=\"pic3\" src={require('./sunny.ico')} />\n                <img id=\"pic4\" src={require('./clouds.ico')} />\n                <img id=\"pic5\" src={require('./rain.ico')} />\n              </div>\n          </div>       \n         </div>\n      </th>\n      <th id=\"row22\">\n         <div className=\"plot\">  \n         <Line\n            ref=\"chart\"\n            data={this.state.dict1}\n            getDataSetAtEvent={dataset => console.log(dataset)}\n            options={this.state.options1}\n         />\n       </div>\n      </th>\n      </tr>\n      <tr>\n       <th>\n          <div className=\"plot2\">  \n            <Bar\n              ref=\"chart2\"\n              data={this.state.dict2}\n              getDataSetAtEvent={dataset => console.log(dataset)}\n             options={this.state.options2}\n            />\n          </div>\n        </th>\n        <th>\n          <div className=\"plot3\">\n            <Line\n              ref=\"chart3\"\n              data={this.state.dict3}\n              getDataSetAtEvent={dataset => console.log(dataset)}\n              options={this.state.options3}\n            />\n          </div>\n        </th>\n      </tr>\n    </table>\n\n    </div>\n        );\n    }\n    /**\n     *  Setting up the map and default plots when component mounts\n     **/\n    componentDidMount() {\n        /*Initialize map */\n        this.map = L.map('mapid', {\n            center: [45.55, 5.12],\n            zoom: 5,\n            zoomControl: true\n        })\n        /*Add layer to view map*/\n        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 18,\n            id: 'mapbox.streets',\n            accessToken: 'pk.eyJ1IjoibWFsZWtoYSIsImEiOiJjazNlajUwNXcwOG54M2Ntemt5NGE1MnFqIn0.zmG039olyjNTguPwa1Q0zA'\n        }).addTo(this.map);\n        /*bind onClick MAP listener*/\n        this.map.on('click', this.onMapClick);\n        /*Adding default location marker*/\n        this.state.marker.addTo(this.map);\n\n        /*Default fetch of forecast for Paris,Fr*/\n        return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=paris,fr&APPID=${Key}`)\n            .then(response => (response.json()))\n            .then(json => {\n                console.log(json);\n                this.setState({\n                    data: json.list\n                })\n                this.getWeather();\n            })\n            .catch((error) => {\n                console.log(\"error\", error);\n            })\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunny.01d21945.ico\";"],"sourceRoot":""}