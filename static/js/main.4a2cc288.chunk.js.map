{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Key","greenIcon","L","Icon","extend","options","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","require","shadowUrl","App","props","onMapClick","bind","getWeather","getLocation","state","marker","icon","data","weatherDescription","weatherDescriptionTime","options1","title","display","text","fontSize","tooltips","mode","scales","xAxes","scaleLabel","labelString","yAxes","type","position","id","gridLines","labels","show","options2","options3","dict1","datasets","label","dict2","dict3","e","coordLat","latlng","lat","coordLng","lng","newLatLng","LatLng","this","map","removeLayer","setState","addTo","bindPopup","Number","parseFloat","toFixed","openPopup","fetch","then","response","json","console","log","list","catch","error","city","document","getElementById","value","country","temperature","rain","pressure","humidity","windSpeed","windDirection","weatherDes","weatherDesTime","time","currentweather","num","i","push","main","temp","weath","weather","dt_txt","wind","speed","deg","tochaine","JSON","stringify","includes","substr","indexOf","dict1Copy","yAxisID","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","dict2Copy","hoverBackgroundColor","hoverBorderColor","dict3Copy","fill","className","placeholder","onClick","width","align","colspan","Object","keys","key","index","ref","getDataSetAtEvent","dataset","center","zoom","zoomControl","tileLayer","attribution","maxZoom","accessToken","on","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a2cc288.chunk.js","sourcesContent":["import React, {\r\n  Component\r\n} from \"react\";\r\nimport \"./App.css\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport {\r\n  Bar,\r\n  Line\r\n} from \"react-chartjs-2\";\r\n\r\n/** API key definition **/\r\nconst Key = \"6c1ce666f73cd6af767b3161e69090cd\";\r\n\r\n/*Defining the marker icon*/\r\nvar LeafIcon = L.Icon.extend({\r\n  options: {\r\n    iconSize: [35, 40],\r\n    shadowSize: [50, 64],\r\n    iconAnchor: [18, 37],\r\n    shadowAnchor: [20, 62],\r\n    popupAnchor: [-4, -10]\r\n  }\r\n});\r\nvar greenIcon = new LeafIcon({\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\r\n});\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /**Binding the functions to the application context **/\r\n    this.onMapClick = this.onMapClick.bind(this);\r\n    this.getWeather = this.getWeather.bind(this);\r\n    this.getLocation = this.getLocation.bind(this);\r\n    /** Defining the state variables**/\r\n    this.state = {\r\n      marker: L.marker([48.864, 2.349], {\r\n        icon: greenIcon\r\n      }),\r\n      data: [],\r\n      weatherDescription: [],\r\n      weatherDescriptionTime: [],\r\n      /**Defining the display options of the plots**/\r\n      options1: {\r\n        title: {\r\n          display: true,\r\n          text: \"Temperature and Rain\",\r\n          fontSize: 20\r\n        },\r\n        tooltips: {\r\n          mode: \"label\"\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date and Time\"\r\n            }\r\n          }],\r\n          yAxes: [{\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Temperature (K)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"left\",\r\n              id: \"y-axis-1\",\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              labels: {\r\n                show: true\r\n              }\r\n            },\r\n            {\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Rain (mm)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"right\",\r\n              id: \"y-axis-2\",\r\n              gridLines: {\r\n                display: false\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      options2: {\r\n        title: {\r\n          display: true,\r\n          text: \"Pressure and Humidity\",\r\n          fontSize: 20\r\n        },\r\n        tooltips: {\r\n          mode: \"label\"\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date and Time\"\r\n            }\r\n          }],\r\n          yAxes: [{\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Pressure (hPa)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"left\",\r\n              id: \"y-axis-1\",\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              labels: {\r\n                show: true\r\n              }\r\n            },\r\n            {\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Humidity (%)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"right\",\r\n              id: \"y-axis-2\",\r\n              gridLines: {\r\n                display: false\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      options3: {\r\n        title: {\r\n          display: true,\r\n          text: \"Wind Speed and direction\",\r\n          fontSize: 20\r\n        },\r\n        tooltips: {\r\n          mode: \"label\"\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date and Time\"\r\n            }\r\n          }],\r\n          yAxes: [{\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Speed (m/s)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"left\",\r\n              id: \"y-axis-1\",\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              labels: {\r\n                show: true\r\n              }\r\n            },\r\n            {\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Direction (Degrees)\"\r\n              },\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"right\",\r\n              id: \"y-axis-2\",\r\n              gridLines: {\r\n                display: false\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      /** Initializing the data to be displayed **/\r\n      dict1: {\r\n        datasets: [{\r\n            label: \"Temperature\"\r\n          },\r\n          {\r\n            label: \"Rain\"\r\n          }\r\n        ]\r\n      },\r\n      dict2: {\r\n        datasets: [{\r\n            label: \"Pressure bars\"\r\n          },\r\n          {\r\n            label: \"Humidity bars\"\r\n          }\r\n        ]\r\n      },\r\n      dict3: {\r\n        datasets: [{\r\n            label: \"Wind Speed\"\r\n          },\r\n          {\r\n            label: \"Wind Direction\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n  /** Map OnClick Event handler\r\n   * Retrives relative weather data to\r\n   * the location clicked on map\r\n   *@param {e} - event location\r\n   **/\r\n  onMapClick(e) {\r\n    /** Retrieving the clicked location's coordinates**/\r\n    var coordLat = e.latlng.lat;\r\n    var coordLng = e.latlng.lng;\r\n    var newLatLng = new L.LatLng(coordLat, coordLng);\r\n    /*Removing old marker */\r\n    this.map.removeLayer(this.state.marker);\r\n    this.setState({\r\n      marker: L.marker(newLatLng, {\r\n        icon: greenIcon\r\n      })\r\n    });\r\n    /*Add new marker and popup to the map*/\r\n    this.state.marker.addTo(this.map);\r\n    this.state.marker\r\n      .bindPopup(\r\n        `coordinates(${Number.parseFloat(coordLat).toFixed(\r\n          2\r\n        )},${Number.parseFloat(coordLng).toFixed(2)})`\r\n      )\r\n      .openPopup();\r\n    /*Fetch weather data of location*/\r\n    return fetch(\r\n        `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?lat=${coordLat}&lon=${coordLng}&APPID=${Key}`\r\n      )\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json);\r\n        /**Saving the retrieved data in the corresponding state variable **/\r\n        this.setState({\r\n          data: json.list\r\n        });\r\n        /**Call sorting data function**/\r\n        this.getWeather();\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error\", error);\r\n      });\r\n  }\r\n  /** Button OnClick Listener\r\n   * Retrives relative weather data to\r\n   * the location entered as input\r\n   **/\r\n  getLocation() {\r\n    /**Retrieving the city's name and country **/\r\n    var city = document.getElementById(\"SearchCity\").value;\r\n    var country = document.getElementById(\"SearchCountry\").value;\r\n    return fetch(\r\n        `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${Key}`\r\n      )\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json);\r\n        this.setState({\r\n          data: json.list\r\n        });\r\n        this.getWeather();\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error\", error);\r\n      });\r\n  }\r\n\r\n  /** Function sorting the json data retrieved\r\n   * Retrieving the temperature, rain, pressure,\r\n   * humidity, wind(speed and direction) and date/time\r\n   **/\r\n  getWeather() {\r\n    var temperature = [];\r\n    var rain = [];\r\n    var pressure = [];\r\n    var humidity = [];\r\n    var windSpeed = [];\r\n    var windDirection = [];\r\n    var weatherDes = [];\r\n    var weatherDesTime = [];\r\n    var time = [];\r\n    var currentweather = \"\";\r\n    var num = 0;\r\n    /**Iterating through the json data elements**/\r\n    for (var i in this.state.data) {\r\n      /*Collecting temperature*/\r\n      temperature.push(this.state.data[i].main.temp);\r\n      /*Collecting first few weather description changes*/\r\n      var weath = this.state.data[i].weather[0].main;\r\n      if (weath !== currentweather && num < 8) {\r\n        weatherDes.push(weath);\r\n        /*Collecting the corresponding description time and date*/\r\n        weatherDesTime.push(this.state.data[i].dt_txt);\r\n        currentweather = weath;\r\n        num = num + 1;\r\n      }\r\n      /*Collecting humidity*/\r\n      humidity.push(this.state.data[i].main.humidity);\r\n      /*Collecting wind speed*/\r\n      windSpeed.push(this.state.data[i].wind.speed);\r\n      /*Collecting wind direction*/\r\n      windDirection.push(this.state.data[i].wind.deg);\r\n      /*Testing if there has been rain the past 3 hours*/\r\n      var tochaine = JSON.stringify(this.state.data[i]);\r\n      if (tochaine.includes(\"3h\")) {\r\n        var value = tochaine.substr(tochaine.indexOf(\"3h\") + 4, 4);\r\n        /*Collecting rain volume*/\r\n        rain.push(parseFloat(value));\r\n      } else {\r\n        /*No rain*/\r\n        rain.push(0);\r\n      }\r\n      /*Collecting pressure*/\r\n      pressure.push(this.state.data[i].main.pressure);\r\n      /*Collecting Date and time*/\r\n      time.push(this.state.data[i].dt_txt);\r\n    }\r\n    /**Defining copies of data to be displayed**/\r\n    var dict1Copy = {\r\n      labels: time,\r\n      datasets: [{\r\n          label: \"Temperature\",\r\n          data: temperature,\r\n          yAxisID: \"y-axis-1\",\r\n          backgroundColor: \"rgba(250,128,114,0.1)\",\r\n          borderColor: \"rgb(250,128,114)\",\r\n          borderCapStyle: \"butt\",\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: \"miter\",\r\n          pointBorderColor: \"rgb(250,128,114)\",\r\n          pointBackgroundColor: \"#fff\",\r\n          pointBorderWidth: 2,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: \"rgb(250,128,114)\",\r\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n          pointHoverBorderWidth: 5,\r\n          pointRadius: 4,\r\n          pointHitRadius: 10\r\n        },\r\n        {\r\n          label: \"Rain\",\r\n          data: rain,\r\n          yAxisID: \"y-axis-2\",\r\n          backgroundColor: \"rgba(75,192,192,0.4)\",\r\n          borderColor: \"rgba(75,192,192,1)\",\r\n          borderCapStyle: \"butt\",\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: \"miter\",\r\n          pointBorderColor: \"rgba(75,192,192,1)\",\r\n          pointBackgroundColor: \"#fff\",\r\n          pointBorderWidth: 2,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n          pointHoverBorderWidth: 5,\r\n          pointRadius: 4,\r\n          pointHitRadius: 10\r\n        }\r\n      ]\r\n    };\r\n\r\n    var dict2Copy = {\r\n      labels: time,\r\n      datasets: [{\r\n          label: \"Pressure bars\",\r\n          backgroundColor: \"#9ACD32\",\r\n          borderColor: \"#9ACD32\",\r\n          hoverBackgroundColor: \"#000080\",\r\n          hoverBorderColor: \"#92a1cf\",\r\n          data: pressure,\r\n          yAxisID: \"y-axis-1\"\r\n        },\r\n        {\r\n          label: \"Humidity\",\r\n          data: humidity,\r\n          borderColor: \"#ffefd5\",\r\n          backgroundColor: \"#EC932F\",\r\n          hoverBackgroundColor: \"#ffefd5\",\r\n          hoverBorderColor: \"#EC932F\",\r\n          yAxisID: \"y-axis-2\"\r\n        }\r\n      ]\r\n    };\r\n\r\n    var dict3Copy = {\r\n      labels: time,\r\n      datasets: [{\r\n          label: \"Wind Speed\",\r\n          fill: false,\r\n          data: windSpeed,\r\n          yAxisID: \"y-axis-1\",\r\n          backgroundColor: \"rgba(75,192,192,0.1)\",\r\n          borderColor: \"rgb(75,192,192)\"\r\n        },\r\n        {\r\n          label: \"Wind direction\",\r\n          fill: false,\r\n          data: windDirection,\r\n          backgroundColor: \"#c0c0c0\",\r\n          borderColor: \"#c0c0c0\",\r\n          yAxisID: \"y-axis-2\"\r\n        }\r\n      ]\r\n    };\r\n    /*Setting the state variables to corresponding values*/\r\n    this.setState({\r\n      weatherDescription: weatherDes,\r\n      weatherDescriptionTime: weatherDesTime,\r\n      dict1: dict1Copy,\r\n      dict2: dict2Copy,\r\n      dict3: dict3Copy\r\n    });\r\n  }\r\n\r\n\r\n  /**Render function\r\n   *Defining the application's content\r\n   **/\r\n  render() {\r\n    const {\r\n      weatherDescription\r\n    } = this.state;\r\n    const {\r\n      weatherDescriptionTime\r\n    } = this.state;\r\n    return (\r\n      < div className = \"App\" >\r\n      < header className = \"App-header\" > Weather App < /header> {\" \"}\r\n\r\n      < table className = \"table\" >\r\n\r\n        < tr className = \"line1\">\r\n            < div className = \"SearchBar\" >\r\n              < h4 id = \"title\" > Enter city & country or Click on map < /h4>{\" \"}\r\n              < input type = \"search\" id = \"SearchCity\" placeholder = \"Paris\" / >\r\n              < input type = \"search\" id = \"SearchCountry\" placeholder = \"France\" / >\r\n              < button className = \"getWeatherbutton\" onClick = {this.getLocation}\r\n                value = \"Charge\" > {\" \"} Charge {\" \"} </button>\r\n                <br/>\r\n            < /div>{\" \"}\r\n        </tr>{\" \"}\r\n\r\n        < tr className = \"\" id = \"mapid\" width=\"100%\" align=\"center\">\r\n        < /tr > {\" \"}\r\n\r\n        < tr className = \"line3\" colspan=\"100%\">\r\n              < th id = \"row11\" >\r\n              < div className = \"description\" >\r\n                < h4 className = \"title2\" > {\" \"}\r\n                  Expected changes\r\n                  for the next 5 days {\" \"}\r\n                </h4>{\" \"}\r\n\r\n                <table className = \"NestedTable\" >\r\n                < tr >\r\n                  < td > {\" \"}\r\n                    < div className = \"column1Titre\" > {\" \"}\r\n                      Main description {\" \"}\r\n                    < /div>{\" \"}\r\n                  < /td >\r\n\r\n                  < td > {\" \"}\r\n                    < div className = \"column2Titre\" > Date and time < /div>\r\n                  < /td >\r\n                < /tr>{\" \"}\r\n\r\n                < tr >\r\n                  < td >\r\n                    < div className = \"DescText\" > {\" \"}\r\n                    { Object.keys(weatherDescription).map((key, index) =>  (< p key = { index } > {weatherDescription[key]} < /p> ))}\r\n                    {\" \"}\r\n                    </div>{\" \"}\r\n                  < /td > {\" \"}\r\n\r\n                  < td >\r\n                    < div className = \"DescTime\" > {\" \"}\r\n                    { Object.keys(weatherDescriptionTime).map((key, index) => ( <p key = {index} > {weatherDescriptionTime[key]} < /p>))}\r\n                    {\" \"}\r\n                    </div>{\" \"}\r\n                  < /td > {\" \"}\r\n                < /tr>{\" \"}\r\n\r\n                < /table > {\" \"}\r\n              </div>{\" \"}\r\n              < /th > {\" \"}\r\n          < /tr > {\" \"}\r\n\r\n          < tr id = \"line4\" >\r\n            < div className = \"plot1\" >\r\n            < Line ref = \"chart\"\r\n            data = {this.state.dict1 }\r\n            getDataSetAtEvent = { dataset => console.log(dataset) }\r\n            options = { this.state.options1 } /> {\" \"}\r\n            < / div > {\" \"}\r\n          </tr>{\" \"}\r\n\r\n          < tr className = \"line5\">\r\n              < div className = \"plot2\" >\r\n              < Bar ref = \"chart2\" data = {this.state.dict2}\r\n              getDataSetAtEvent = { dataset => console.log(dataset)}\r\n              options = { this.state.options2 } /> {\" \"}\r\n              < /div > {\" \"}\r\n          < /tr > {\" \"}\r\n\r\n          < tr className = \"line6\">\r\n              < div className = \"plot3\" >\r\n                < Line ref = \"chart3\"\r\n                data = {this.state.dict3}\r\n                getDataSetAtEvent = { dataset => console.log(dataset)}\r\n                options = { this.state.options3 } /> {\" \"}\r\n              < /div > {\" \"}\r\n          < /tr > {\" \"}\r\n\r\n      < /table>\r\n      < /div >\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   *  Setting up the map and default plots when component mounts\r\n   **/\r\n  componentDidMount() {\r\n    /*Initialize map */\r\n    this.map = L.map(\"mapid\", {\r\n      center: [45.55, 5.12],\r\n      zoom: 5,\r\n      zoomControl: true\r\n    });\r\n    /*Add layer to view map*/\r\n    L.tileLayer(\r\n      \"https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\", {\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        maxZoom: 18,\r\n        id: \"mapbox.streets\",\r\n        accessToken: \"pk.eyJ1IjoibWFsZWtoYSIsImEiOiJjazNlajUwNXcwOG54M2Ntemt5NGE1MnFqIn0.zmG039olyjNTguPwa1Q0zA\"\r\n      }\r\n    ).addTo(this.map);\r\n    /*bind onClick MAP listener*/\r\n    this.map.on(\"click\", this.onMapClick);\r\n    /*Adding default location marker*/\r\n    this.state.marker.addTo(this.map);\r\n\r\n    /*Default fetch of forecast for Paris,Fr*/\r\n    return fetch(\r\n        `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=paris,fr&APPID=${Key}`\r\n      )\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json);\r\n        this.setState({\r\n          data: json.list\r\n        });\r\n        this.getWeather();\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error\", error);\r\n      });\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}